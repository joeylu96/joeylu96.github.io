<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://joeylu96.github.io</id><title>JoeyLu</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-05-28T12:43:35+08:00</updated> <author> <name>JoeyLu</name> <uri>https://joeylu96.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://joeylu96.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 JoeyLu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>简单功能与服务器</title><link href="https://joeylu96.github.io/posts/project/" rel="alternate" type="text/html" title="简单功能与服务器" /><published>2021-05-28T00:00:00+08:00</published> <updated>2021-05-28T00:00:00+08:00</updated> <id>https://joeylu96.github.io/posts/project/</id> <content src="https://joeylu96.github.io/posts/project/" /> <author> <name>JoeyLu</name> </author> <category term="学习" /> <category term="项目" /> <summary> 前言:整理一下平时写的小项目   基于epoll的c++服务器，实现了简单的客户端消息读取，以及工作线程多线程处理请求并反包的功能。https://github.com/joeylu96/epoll_server </summary> </entry> <entry><title>排序</title><link href="https://joeylu96.github.io/posts/%E6%8E%92%E5%BA%8F/" rel="alternate" type="text/html" title="排序" /><published>2020-12-28T23:30:00+08:00</published> <updated>2021-05-28T12:42:58+08:00</updated> <id>https://joeylu96.github.io/posts/%E6%8E%92%E5%BA%8F/</id> <content src="https://joeylu96.github.io/posts/%E6%8E%92%E5%BA%8F/" /> <author> <name>JoeyLu</name> </author> <category term="学习" /> <category term="数据结构算法" /> <summary> 线性表的排序 1.概述:     关于线性表的排序，将从以下几个方面进行学习:冒泡排序，插入排序，选择排序， 快排，归并排序，桶排序，计数排序和基数排序。     1.冒泡排序：从前往后依次排序相邻的两个数据，每一次遍历的排序会让至少一个元素移动 到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作。时间复杂度O(n²)，空间复杂度O(1)即为原地排序， 可通过排序的函数成为稳定的排序算法。     2.插入排序：将数组分为已排序区间和未排序区间，遍历初始数据（未排序区），按顺序 插入已排序区，插入时也包含两种操作，一种是元素的比较，一种是元素的移动。时间复杂度O(n²)，空间复杂度O(1)， 可通过插入的顺序来实现稳定性。     3.选择排序：选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。 但是选择排序每次会从未排序区间中找到最小的元素，将其... </summary> </entry> <entry><title>存储管理_2</title><link href="https://joeylu96.github.io/posts/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/" rel="alternate" type="text/html" title="存储管理_2" /><published>2020-12-27T22:00:00+08:00</published> <updated>2020-12-28T23:39:58+08:00</updated> <id>https://joeylu96.github.io/posts/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id> <content src="https://joeylu96.github.io/posts/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/" /> <author> <name>JoeyLu</name> </author> <category term="学习" /> <category term="操作系统" /> <summary> Linux进程与存储管理 1.进程与存储概述:     linux操作系统只有在其内核装入内存后才能开始运行。为了使内核在开机时顺利装入 内存，用户必须将linux操作系统的执行代码以文件方式存储在计算机硬盘设备中，并对计算机系统中的其他资源 进行初始化，此过程为操作系统的安装。当安装好后，计算机电源开，系统引导程序将外存硬盘中的操作系统核心 加载到内存，然后进行linux核心的初始化，设置和初始化各种数据结构和表格，初始化linux核心和各个子系统的过程。 这一过程从进程角度来说，首先建立linux系统中唯一一个静态建立的进程（0#进程或idle进程），之后创建控制终端进程 和运行shell的init进程（1#）。linux系统中通过请求操作系统服务进入核心态的机制称为系统调用。 2.Linux进程调度:     调度模块分配CPU，按照进程的优先级，每次调度最高优先级的进程去占... </summary> </entry> <entry><title>存储管理_1</title><link href="https://joeylu96.github.io/posts/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/" rel="alternate" type="text/html" title="存储管理_1" /><published>2020-12-22T21:30:00+08:00</published> <updated>2020-12-28T23:39:58+08:00</updated> <id>https://joeylu96.github.io/posts/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id> <content src="https://joeylu96.github.io/posts/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/" /> <author> <name>JoeyLu</name> </author> <category term="学习" /> <category term="操作系统" /> <summary> 存储管理 1.存储管理概述:     存储器由内存和外存组成。内存由顺序编址的块组成，每块包含相应的物理单元。 外存是指指除计算机内存及CPU缓存以外的储存器。内存用于存放那些立即要用的程序和数据；外存用于存放暂时不用的程序和数据。 CPU要通过启动相应的输入输出设备才能让内存与外存之间交换信息。 2.存储管理的功能:     下面介绍存储管理的功能：     1.虚拟存储器：编译链接程序把用户源程序编译后链接到一个以0地址为始地址的线性或多维虚拟地址空间。 每个指令或数据单元都在这个虚拟空间中拥有确定的地址，此为虚拟地址。每个进程都有这样一个空间，其排序可以是非连续的，其实际 物理地址由虚拟地址变换得到。这些虚拟地址组成的空间称为虚拟存储器。虚拟存储器是一个在物理上只受内存和外存总容量限制的存储系统。     2.地址变换：内存地址的集合为内存空间或物理地址空间。在内存中，每一... </summary> </entry> <entry><title>处理机调度</title><link href="https://joeylu96.github.io/posts/CPU%E8%B0%83%E5%BA%A6/" rel="alternate" type="text/html" title="处理机调度" /><published>2020-12-21T21:20:00+08:00</published> <updated>2020-12-21T21:20:00+08:00</updated> <id>https://joeylu96.github.io/posts/CPU%E8%B0%83%E5%BA%A6/</id> <content src="https://joeylu96.github.io/posts/CPU%E8%B0%83%E5%BA%A6/" /> <author> <name>JoeyLu</name> </author> <category term="学习" /> <category term="操作系统" /> <summary> 处理机调度 1.处理机调度概述:     处理机调度即CPU管理方法，不同的CPU管理方法提供不同性能的操作系统，一个好的操作系统 应该尽可能地使各作业搭配合理，充分利用系统中的各种资源。衡量操作系统的指标通常为：周转时间，吞吐率，响应时间和设备利用率。 计算过程是周转时间，接到命令到计算出答案并回答是响应时间。 2.调度的分级:     处理机调度可以分为4个级别：作业调度，交换调度，进程调度和线程调度。     1.作业调度：又称宏观调度或高级调度，主要是按一定的原则对外存输入井中的后备作业进行选择，并给作业分配 内存和输入输出设备等必备资源，建立其对应的根进程，以使该作业的进程获得竞争处理机的权力。另外当作业执行完毕时，还负责回收系统资源。     2.交换调度：按给定的原则和策略，将存于外存交换区中的就绪状态或等待状态的进程调入内存，或把内存就绪状态 或内存等待状态的进程交... </summary> </entry> </feed>
